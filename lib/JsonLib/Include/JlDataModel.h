////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JsonLib
//
//  This module provides functions for creating a data model suitable for representing a JSON file. The base type
//  JlDataObject* represents a data object tree. It may contain a single data type such as a string or number, or
//  a dictionary or list which contains other data objects.
//
//  This is free and unencumbered software released into the public domain - November 2019 waterjuice.org
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  IMPORTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "JlStatus.h"
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  TYPES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef enum
{
    JL_DATA_TYPE_NONE = 0,
    JL_DATA_TYPE_STRING = 1,
    JL_DATA_TYPE_NUMBER = 2,
    JL_DATA_TYPE_BOOL = 3,
    JL_DATA_TYPE_LIST = 4,
    JL_DATA_TYPE_DICTIONARY = 5
} JL_DATA_TYPE;

typedef enum
{
    JL_NUM_TYPE_NONE = 0,
    JL_NUM_TYPE_UNSIGNED = 10,
    JL_NUM_TYPE_SIGNED = 11,
    JL_NUM_TYPE_FLOAT = 12
} JL_NUM_TYPE;

#define JL_DATA_TYPE_MAX_VALUE  JL_DATA_TYPE_DICTIONARY

typedef struct JlDataObject JlDataObject;
typedef struct JlList JlList;
typedef struct JlNumber JlNumber;
typedef struct JlListItem JlListItem;
typedef struct JlDictionary JlDictionary;
typedef struct JlDictionaryItem JlDictionaryItem;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  PUBLIC FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlCreateObject
//
//  Creates a new JlDataObject of the specified type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlCreateObject
    (
        JL_DATA_TYPE    Type,
        JlDataObject**  pNewObject
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlCreateObjectWithTag
//
//  This creates a new JlDataObject of the specified type and also adds an optional tag value. This is intended
//  to be used to indicate the original character position within the json in order to be able to return a helpful
//  error hint when unmarshalling the data. If no tag is required then use JlCreateObject
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlCreateObjectWithTag
    (
        JL_DATA_TYPE    Type,
        size_t          Tag,
        JlDataObject**  pNewObject
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlSetObjectString
//
//  Sets the value of a string object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlSetObjectString
    (
        JlDataObject*   StringObject,
        char const*     String
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlSetObjectNumberU64
//
//  Sets the value of a number object as a uint64_t
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlSetObjectNumberU64
    (
        JlDataObject*   NumberObject,
        uint64_t        NumberU64
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlSetObjectNumberHex
//
//  Sets the value of a number object as a uint64_t and mark it as a hexadecimal number
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlSetObjectNumberHex
    (
        JlDataObject*   NumberObject,
        uint64_t        NumberU64
    );

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlSetObjectNumberS64
//
//  Sets the value of a number object as an int64_t
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlSetObjectNumberS64
    (
        JlDataObject*   NumberObject,
        int64_t         NumberS64
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlSetObjectNumberF64
//
//  Sets the value of a number object as a double
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlSetObjectNumberF64
    (
        JlDataObject*   NumberObject,
        double          NumberF64
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlSetObjectBool
//
//  Sets the value of a boolean object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlSetObjectBool
    (
        JlDataObject*   BoolObject,
        bool            BoolValue
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlAttachObjectToListObject
//
//  Adds an object to the end of an existing list object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlAttachObjectToListObject
    (
        JlDataObject*   ListObject,
        JlDataObject*   NewObject
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlAttachObjectToDictionaryObject
//
//  Adds an object to an existing dictionary object with specified key. The key must not already exist in the
//  dictionary.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlAttachObjectToDictionaryObject
    (
        JlDataObject*   DictionaryObject,
        char const*     KeyName,
        JlDataObject*   NewObject
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlDetachObjectFromDictionaryObject
//
//  Removes an object from a dictionary object. This does NOT deallocate the object, it is left as a free standing
//  object tree of its own. Use JlFreeObjectTree on the detached object to free it.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlDetachObjectFromDictionaryObject
    (
        JlDataObject*   DictionaryObject,
        char const*     KeyName
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetObjectType
//
//  Returns the object type of an object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_DATA_TYPE
    JlGetObjectType
    (
        JlDataObject const* Object
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetObjectTag
//
//  Returns the object tag if set with JlCreateObjectWithTag
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t
    JlGetObjectTag
    (
        JlDataObject const*   Object
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetObjectString
//
//  Gets the string from a String object. This returns the pointer of the internal string and must not be modified.
//  Returns JL_STATUS_WRONG_TYPE if the object is not a string object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlGetObjectString
    (
        JlDataObject const* StringObject,
        char const**        pString
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetObjectNumberU64
//
//  Gets the number object as uint64_t. Returns JL_STATUS_WRONG_TYPE if the object is not a number or
//  JL_STATUS_VALUE_OUT_OF_RANGE if it can not be represented as a uint64_t
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlGetObjectNumberU64
    (
        JlDataObject const* NumberObject,
        uint64_t*           pNumber64
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetObjectNumberS64
//
//  Gets the number object as int64_t. Returns JL_STATUS_WRONG_TYPE if the object is not a number or
//  JL_STATUS_VALUE_OUT_OF_RANGE if it can not be  represented as a int64_t
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlGetObjectNumberS64
    (
        JlDataObject const* NumberObject,
        int64_t*            pNumberS64
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetObjectNumberF64
//
//  Gets the number object as double. Returns JL_STATUS_WRONG_TYPE if the object is not a number or can not be
//  represented as a double
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlGetObjectNumberF64
    (
        JlDataObject const* NumberObject,
        double*             pNumberF64
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlSetObjectNumberString
//
//  Sets the value of a number object from a string
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlSetObjectNumberString
    (
        JlDataObject*   NumberObject,
        char const*     NumberString
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetObjectBool
//
//  Gets the boolean object. Returns JL_STATUS_WRONG_TYPE if object is not a bool
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlGetObjectBool
    (
        JlDataObject const* BoolObject,
        bool*               pBoolValue
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetObjectNumberType
//
//  Returns the JL_NUM_TYPE of the object. If the object is not a number or not valid then this will
//  return JL_NUM_TYPE_NONE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_NUM_TYPE
    JlGetObjectNumberType
    (
        JlDataObject const*     NumberObject
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlIsObjectNumberHex
//
//  Returns true if the object is a number and is set as hex, otherwise false.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_NUM_TYPE
    JlIsObjectNumberHex
    (
        JlDataObject const*     NumberObject
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetObjectListNextItem
//
//  Gets the next object in the list object.
//  To get the first item in the list *pEnumerator must be NULL. To get the next item in the list pass the value
//  of *pEnumerator that was returned from previous call. The value of *pEnumerator is opaque and must not be used
//  for any other purpose.
//  The function returns the next data object in the list until there are no more, then it will return
//  JL_STATUS_END_OF_DATA.
//  If ListObject is not a list object or pEnumerator is not valid then this function will return JL_STATUS_WRONG_TYPE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlGetObjectListNextItem
    (
        JlDataObject const*   ListObject,
        JlDataObject**        pNextObject,
        JlListItem**          pEnumerator
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetObjectDictionaryNextItem
//
//  Gets the next object in the dictionary object.
//  To get the first item in the dictionary *pEnumerator must be NULL. To get the next item in the list pass the value
//  of *pEnumerator that was returned from previous call. The value of *pEnumerator is opaque and must not be used
//  for any other purpose.
//  *pKeyName will be set to the Key of the dictionary associated with the object. This is a pointer to a string
//  within the DictionaryObject and must not be modified.
//  The function returns the next data object in the list until there are no more, then it will return
//  JL_STATUS_END_OF_DATA.
//  If DictionaryObject is not a dictionary object or pEnumerator is not valid then this function will return
//  JL_STATUS_WRONG_TYPE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlGetObjectDictionaryNextItem
    (
        JlDataObject const*       DictionaryObject,
        JlDataObject**            pNextObject,
        char const**              pKeyName,
        JlDictionaryItem**        pEnumerator
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetObjectDictionaryByKey
//
//  Gets an object from a dictionary based on key name
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlGetObjectFromDictionaryByKey
    (
        JlDataObject const*         DictionaryObject,
        char const*                 KeyName,
        JlDataObject**              pObject
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetStringFromDictionaryByKey
//
//  Gets an string from a dictionary based on key name.
//  Returns JL_STATUS_NOT_FOUND if the key does not exist in the dictionary.
//  Returns JL_STATUS_WRONG_TYPE if the key exists but is not a string type.
//  This returns a pointer into DictionaryObject and must not be modified
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlGetStringFromDictionaryByKey
    (
        JlDataObject const*         DictionaryObject,
        char const*                 KeyName,
        char const**                pString
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetListCount
//
//  Gets the count of elements in a list object. Returns 0 if the object is not a list type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint32_t
    JlGetListCount
    (
        JlDataObject const*         ListObject
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlGetListFromDictionaryByKey
//
//  Gets a list object from a dictionary based on key name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlGetListFromDictionaryByKey
    (
        JlDataObject const*         DictionaryObject,
        char const*                 KeyName,
        JlDataObject**              pListObject
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  JlFreeObjectTree
//
//  Frees an object and all items below it (if it is a dictionary or list)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
JL_STATUS
    JlFreeObjectTree
    (
        JlDataObject**              pRootObject
    );
