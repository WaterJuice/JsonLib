////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  WjTestLib
//
//  A simple unit test framework.
//
//  This is free and unencumbered software released into the public domain - November 2019 waterjuice.org
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  IMPORTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  TYPES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef enum
{
    WJTL_STATUS_SUCCESS             = 0,
    WJTL_STATUS_FAILED              = -1000,
    WJTL_STATUS_GROUP_NOT_FOUND     = -1001,
    WJTL_STATUS_TEST_NOT_FOUND      = -1002,
    WJTL_STATUS_INVALID_PARAMETER   = -1003,
} WJTL_STATUS;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  MACROS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define WJTL_ASSERT( Condition )        \
    WjTestLib_Assert( (Condition), #Condition, __FILE__, __FUNCTION__, __LINE__ )

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  PROTOTYPES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  WJTL_UNIT_TEST_FUNCTION
//
//  This is the prototype of the test functions. They should return WJTL_STATUS_SUCCESS if the test set succeeded
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef
WJTL_STATUS
    (*WJTL_UNIT_TEST_FUNCTION)
    (
        void
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  MEMORY FUNCTIONS TO USE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  WjTestLib_Calloc
//
//  Same syntax as calloc function. This will return a buffer that has been initialised to zero. Tracking is provided
//  with this allocation, so the unit test library will be able to detect memory leaks.
//  Register this test function with your library to use as the allocation function in order to have memory leak
//  checking available.
//  You must also register WjTesLib_Free
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void*
    WjTestLib_Calloc
    (
        size_t      NumOfElements,
        size_t      SizeOfElements
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  WjTestLib_Malloc
//
//  Same syntax as malloc function. This will return a buffer that has not been initialised to zero. Tracking is provided
//  with this allocation, so the unit test library will be able to detect memory leaks.
//  Register this test function with your library to use as the allocation function in order to have memory leak
//  checking available.
//  You must also register WjTesLib_Free
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void*
    WjTestLib_Malloc
    (
        size_t      Size
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  WjTestLib_MallocAndZero
//
//  Same syntax as malloc function. This will return a buffer that has been initialised to zero. Tracking is provided
//  with this allocation, so the unit test library will be able to detect memory leaks.
//  Register this test function with your library to use as the allocation function in order to have memory leak
//  checking available.
//  You must also register WjTesLib_Free
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void*
    WjTestLib_MallocAndZero
    (
        size_t      Size
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  WjTestLib_Free
//
//  Same syntax as free function. This will free the buffer allocated with WjTestLib_Malloc or WjTestLib_Calloc.
//  Tracking is provided.
//  Register this function with your library to use as the free function in order to have memory leak
//  checking available.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
    WjTestLib_Free
    (
        void*       Memory
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  PUBLIC FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  WjTestLib_NewGroup
//
//  Starts a new group of unit tests. Tests registered with WjTestLib_AddTest will be linked with this group.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
WjTestLib_NewGroup
    (
        char const*     GroupName
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  WjTestLib_AddTest
//
//  Adds a unit test function. This will be attached to the last group set by WjTestLib_NewGroup (or default if none
//  has been created)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
    WjTestLib_AddTest
    (
        WJTL_UNIT_TEST_FUNCTION     TestFunction,
        char const*                 TestName
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  WjTestLib_Run
//
//  Runs the tests that have been registered with WjTestLib_NewGroup and WjTestLib_AddTest. Passthe ArgC and ArgV
//  that came from command line.
//  This should be run from main() after the tests have been registered. This provides an interface complete with
//  help (-h or --help). By default all tests will be run. Command line options allow for testing single groups.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int
    WjTestLib_Run
    (
        int         ArgC,
        char**      ArgV
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  WjTestLib_DisplayResults
//
//  Displays the results of the tests to stdout
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
    WjTestLib_DisplayResults
    (
        void
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  WjTestLib_FreeTests
//
//  Frees all resources associated with tests
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
    WjTestLib_FreeTests
    (
        void
    );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  WjTestLib_Assert
//
//  Records an assert (success if Condition is true, fail if false) for the test executing.
//  Use WJTL_ASSERT macro rather than calling this directly
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void
    WjTestLib_Assert
    (
        bool            Condition,
        char const*     ConditionString,
        char const*     FileName,
        char const*     FunctionName,
        int             LineNumber
    );
